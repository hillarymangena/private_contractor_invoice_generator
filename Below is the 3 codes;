Below is the 3 codes;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chipfuwa Civil and Construction Invoice/Quotation Maker</title>
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background-color: #fff5f5;
            color: #333;
            max-width: 900px; /* Slightly wider body */
            margin: 20px auto;
            padding: 20px;
            text-align: center;
        }
        h2 {
            color: #c0392b;
            font-size: 28px;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 20px;
            background-color: #ffffff;
            padding: 20px; /* Slightly more padding */
            border-radius: 10px; /* Slightly larger radius */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            width: 90%; /* Slightly wider */
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #c0392b;
        }
        input, select {
            width: 85%; /* Slightly wider inputs */
            padding: 12px; /* Slightly longer inputs */
            margin: 5px auto;
            border: 2px solid #e74c3c;
            border-radius: 5px;
            font-size: 16px;
        }
        input:focus, select:focus {
            outline: none;
            border-color: #a93226;
        }
        table {
            border-collapse: collapse;
            width: 85%; /* Slightly wider table */
            margin: 20px auto;
            background-color: #ffffff;
            border-radius: 10px;
            overflow: hidden;
        }
        th, td {
            border: 1px solid #e74c3c;
            padding: 14px; /* Slightly more padding */
            text-align: center;
        }
        th {
            background-color: #c0392b;
            color: #fff;
            font-weight: bold;
        }
        button {
            background-color: #e74c3c;
            color: #fff;
            padding: 12px 24px; /* Slightly larger buttons */
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 5px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #a93226;
        }
        #confirmation, #editForm {
            background-color: #ffffff;
            padding: 25px; /* Slightly more padding */
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
            width: 90%; /* Slightly wider */
        }
        #details p {
            margin: 10px 0;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <h2>Chipfuwa Civil and Construction Invoice/Quotation Maker</h2>
    <div class="form-group">
        <label>What are we making today?</label>
        <select id="type" onchange="updateTitle()">
            <option value="Invoice">Invoice</option>
            <option value="Quotation">Quotation</option>
        </select>
        <p id="title">Selected: <span id="selectedTitle"></span></p>
    </div>
    <div class="form-group">
        <label>Email to send to:</label>
        <input type="email" id="email" placeholder="Enter email" required>
    </div>
    <div class="form-group" id="itemsForm">
        <label>Item/Service:</label>
        <input type="text" id="item" placeholder="e.g., Construction Work">
        <label>Price:</label>
        <input type="number" id="price" placeholder="e.g., 100" step="0.01">
        <button onclick="addItem()">Add Item</button>
        <button onclick="finishItems()" style="display:none;" id="doneBtn">Done</button>
    </div>
    <table id="itemsTable" style="display:none;">
        <tr><th>Item</th><th>Price</th></tr>
    </table>
    <div id="confirmation" style="display:none;">
        <h3>Confirm Details</h3>
        <div id="details"></div>
        <button onclick="confirmDetails('no')">Edit</button>
        <button onclick="confirmDetails('yes')">Send</button>
    </div>
    <div id="editForm" style="display:none;">
        <label>Edit Item:</label><input type="text" id="editItem">
        <label>Edit Price:</label><input type="number" id="editPrice" step="0.01">
        <button onclick="saveEdit()">Save</button>
    </div>
    <script src="/static/script.js"></script>
</body>
</html>


second one;
let items = [];
let email = '';
let title = '';

function updateTitle() {
    title = document.getElementById('type').value;
    document.getElementById('selectedTitle').textContent = title;
}

function addItem() {
    const item = document.getElementById('item').value;
    const price = parseFloat(document.getElementById('price').value);
    if (item && !isNaN(price)) {
        items.push({ description: item, price: price });
        addToTable(item, price);
        document.getElementById('item').value = '';
        document.getElementById('price').value = '';
    }
    document.getElementById('doneBtn').style.display = 'inline';
}

function addToTable(item, price) {
    const table = document.getElementById('itemsTable');
    table.style.display = 'table';
    const row = table.insertRow();
    row.insertCell(0).innerText = item;
    row.insertCell(1).innerText = `R${price.toFixed(2)}`; // Changed $ to R
}

function finishItems() {
    email = document.getElementById('email').value;
    if (email && items.length > 0) {
        document.getElementById('itemsForm').style.display = 'none';
        showConfirmation();
    } else {
        alert('Please enter email and at least one item.');
    }
}

function showConfirmation() {
    const details = document.getElementById('details');
    let total = items.reduce((sum, item) => sum + item.price, 0);
    let vat = total * 0.15;
    let finalTotal = total + vat;
    details.innerHTML = `<p>${title} for ${email}</p><p>Items: ${JSON.stringify(items)}</p><p>Total: R${total.toFixed(2)}</p><p>VAT (15%): R${vat.toFixed(2)}</p><p>Final Total: R${finalTotal.toFixed(2)}</p>`; // Changed $ to R
    document.getElementById('confirmation').style.display = 'block';
}

function confirmDetails(answer) {
    if (answer === 'no') {
        document.getElementById('confirmation').style.display = 'none';
        document.getElementById('editForm').style.display = 'block';
    } else {
        generatePDF();
    }
}

function saveEdit() {
    const item = document.getElementById('editItem').value;
    const price = parseFloat(document.getElementById('editPrice').value);
    if (item && !isNaN(price)) {
        items = [{ description: item, price: price }]; // Simplistic edit
        document.getElementById('itemsTable').innerHTML = '<tr><th>Item</th><th>Price</th></tr>';
        addToTable(item, price);
        document.getElementById('editForm').style.display = 'none';
        showConfirmation();
    }
}

function generatePDF() {
    fetch('http://localhost:8080/generate-pdf', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, email, items })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => alert(data.message))
    .catch(error => {
        console.error('Fetch error:', error);
        alert('Failed to send PDF: ' + error.message);
    });
}

last one;
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from fpdf import FPDF
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.mime.text import MIMEText
import os
import datetime
import logging

app = Flask(__name__)
CORS(app)  # Enable CORS
logging.basicConfig(level=logging.DEBUG)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/generate-pdf', methods=['POST'])
def generate_pdf():
    logging.debug("Received POST request to /generate-pdf")
    data = request.get_json()
    logging.debug(f"Request data: {data}")
    title = data['title']
    email = data['email']
    items = data['items']
    
    # Generate PDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", size=12)

    # Header
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, txt="Chipfuwa Civil and Construction", ln=True, align="C")
    pdf.ln(5)
    pdf.set_font("Arial", "B", 20)
    pdf.cell(0, 10, txt=title, ln=True, align="C")
    pdf.ln(10)

    # Details
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, txt="Issuer: Max", ln=True)
    pdf.cell(0, 10, txt=f"Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S SAST')}", ln=True)
    pdf.cell(0, 10, txt=f"Bill To: {email}", ln=True)
    pdf.ln(10)

    # Table Header
    pdf.set_fill_color(200, 220, 255)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(100, 10, "Description", 1, 0, "C", 1)
    pdf.cell(45, 10, "Price", 1, 0, "C", 1)
    pdf.cell(45, 10, "Quantity", 1, 1, "C", 1)

    # Table Content
    pdf.set_font("Arial", "", 12)
    pdf.set_fill_color(255, 255, 255)
    total = 0
    for item in items:
        price = float(item['price'])
        qty = 1  # Default quantity
        line_total = price * qty
        total += line_total 
        pdf.cell(100, 10, item['description'], 1, 0, "L", 1)
        pdf.cell(45, 10, f"R{price:.2f}", 1, 0, "C", 1)  # Changed $ to R
        pdf.cell(45, 10, str(qty), 1, 1, "C", 1)

    # VAT and Total
    vat = total * 0.15
    final_total = total + vat
    pdf.ln(5)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(145, 10, "Subtotal", 1, 0, "R", 1)
    pdf.cell(45, 10, f"R{total:.2f}", 1, 1, "C", 1)  # Changed $ to R
    pdf.cell(145, 10, "VAT (15%)", 1, 0, "R", 1)
    pdf.cell(45, 10, f"R{vat:.2f}", 1, 1, "C", 1)  # Changed $ to R
    pdf.cell(145, 10, "Total", 1, 0, "R", 1)
    pdf.cell(45, 10, f"R{final_total:.2f}", 1, 1, "C", 1)  # Changed $ to R

    # Save PDF
    pdf_file = f"{title.lower().replace(' ', '_')}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    pdf.output(pdf_file)
    logging.debug(f"PDF saved as {pdf_file}")

    # Send Email with error handling
    sender_email = "maxwelltagwirei@gmail.com"
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = email
    msg['Subject'] = f"{title} from Chipfuwa Civil and Construction"
    msg.attach(MIMEText(f"Attached is your {title} from Chipfuwa Civil and Construction.\n\nRegards, Maxwell", 'plain'))  # Added Regards, Maxwell
    with open(pdf_file, 'rb') as f:
        part = MIMEApplication(f.read(), Name=pdf_file)
        part['Content-Disposition'] = f'attachment; filename="{pdf_file}"'
        msg.attach(part)

    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(sender_email, "nvghyjrvzwthpvvu")  # Replace with your App Password if different
            logging.debug(f"Sending email to {email}")
            server.send_message(msg)
            logging.debug(f"Email sent to {email}")
    except smtplib.SMTPAuthenticationError:
        logging.error("Authentication failed. Check your email or App Password.")
        os.remove(pdf_file)
        return jsonify({"message": "Authentication failed. Check your email or App Password."}), 401
    except Exception as e:
        logging.error(f"SMTP Error: {str(e)}")
        os.remove(pdf_file)
        return jsonify({"message": f"Failed to send email: {str(e)}"}), 500

    os.remove(pdf_file)
    return jsonify({"message": "PDF sent successfully"})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8080)
